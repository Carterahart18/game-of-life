{"version":3,"sources":["registerServiceWorker.js","components/header/index.js","components/canvas/index.js","components/row/index.js","components/button/index.js","containers/controlPanel/index.js","util/constants.js","util/canvasUtil.js","app/index.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","Header","props","react_default","a","createElement","className","text","Canvas","id","width","height","scale","Row","children","Button","disabled","onClick","ControlPanel","onToggle","running","onRandomize","WIDTH","HEIGHT","generateRandomGrid","grid","i","j","Math","random","countNeighbors","num","drawGrid","canvas","document","getElementById","forEach","col","bool","drawPixel","clearPixel","x","y","getContext","fillRect","clearRect","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","start","interval","setInterval","newGrid","neighbors","setState","stop","clearInterval","randomize","React","Component","URL","process","origin","addEventListener","concat","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker","ReactDOM","render","app_App"],"mappings":"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","file":"static/js/main.fc86c0cb.chunk.js","sourcesContent":["// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './styles.css';\n\nconst propTypes = {\n  text: PropTypes.string\n};\n\nexport default function Header(props) {\n  return (\n    <div className={'App-header'}>\n      <h1 className={'App-header-text'}>{props.text}</h1>\n    </div>\n  );\n}\n\nHeader.propTypes = propTypes;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './styles.css';\n\nconst propTypes = {\n  height: PropTypes.number.isRequired,\n  scale: PropTypes.number.isRequired,\n  width: PropTypes.number.isRequired\n};\n\nexport default function Canvas(props) {\n  return (\n    <canvas\n      id={'canvas'}\n      className={'Canvas'}\n      width={props.width}\n      height={props.height}\n      scale={props.scale}\n    />\n  );\n}\n\nCanvas.propTypes = propTypes;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './styles.css';\n\nconst propTypes = {\n  width: PropTypes.number\n};\n\nexport default function Row(props) {\n  return (\n    <div className={'Row'}>\n      {props.children}\n    </div>\n  );\n}\n\nRow.propTypes = propTypes;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './styles.css';\n\nconst propTypes = {\n  disabled: PropTypes.bool,\n  id: PropTypes.string.isRequired,\n  onClick: PropTypes.func.isRequired,\n  text: PropTypes.string.isRequired\n};\n\nexport default function Button(props) {\n  return (\n    <button\n      id={props.id}\n      disabled={props.disabled}\n      className={'button'}\n      onClick={props.onClick}\n    >\n      {props.text}\n    </button>\n  );\n}\n\nButton.propTypes = propTypes;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Button from '../../components/button';\n\nimport './styles.css';\n\nconst propTypes = {\n  running: PropTypes.bool.isRequired,\n  onToggle: PropTypes.func.isRequired,\n  onRandomize: PropTypes.func.isRequired\n};\n\nexport default function ControlPanel(props) {\n  return (\n    <div className={'ControlPanel-container'}>\n      <Button\n        id={'toggle'}\n        onClick={props.onToggle}\n        text={props.running ? 'Stop' : 'Start'}\n      />\n      <Button\n        id={'random'}\n        disabled={props.running}\n        onClick={props.onRandomize}\n        text={'Randomize'}\n      />\n    </div>\n  );\n}\n\nControlPanel.propTypes = propTypes;\n","export const WIDTH = 100;\nexport const HEIGHT = 100;\nexport const SCALE = 5;\n","// Canvas utility\n\nimport { WIDTH, HEIGHT, SCALE } from './constants';\n\nexport const generateRandomGrid = () => {\n  let grid = [[]];\n\n  for (let i = 0; i < WIDTH; i++) {\n    for (let j = 0; j < HEIGHT; j++) {\n      if (!grid[i]) {\n        grid[i] = [];\n      }\n      grid[i][j] = Math.random() * 100 > 50;\n    }\n  }\n\n  return grid;\n};\n\nexport const countNeighbors = (grid, i, j) => {\n  let num = 0;\n\n  if (grid[i - 1]) {\n    if (grid[i - 1][j - 1]) num++;\n    if (grid[i - 1][j]) num++;\n    if (grid[i - 1][j + 1]) num++;\n  }\n  if (grid[i][j - 1]) num++;\n  if (grid[i][j + 1]) num++;\n  if (grid[i + 1]) {\n    if (grid[i + 1][j - 1]) num++;\n    if (grid[i + 1][j]) num++;\n    if (grid[i + 1][j + 1]) num++;\n  }\n\n  return num;\n};\n\nexport const drawGrid = (grid) => {\n  const canvas = document.getElementById('canvas');\n  grid.forEach(function(col, i) {\n    col.forEach(function(bool, j) {\n      if (grid[i][j]) {\n        drawPixel(canvas, i, j, SCALE);\n      } else {\n        clearPixel(canvas, i, j, SCALE);\n      }\n    });\n  });\n};\n\nexport const drawPixel = (canvas, x, y) => {\n  canvas.getContext('2d').fillRect(x * SCALE, y * SCALE, SCALE, SCALE);\n};\n\nexport const clearPixel = (canvas, x, y) => {\n  canvas.getContext('2d').clearRect(x * SCALE, y * SCALE, SCALE, SCALE);\n};\n\nexport const isPixelSet = (canvas, x, y) => {\n  var image = canvas.getContext('2d').getImageData(x, y, 1, 1);\n  if (image) {\n    return image.data && image.data[3] !== 0 ? true : false;\n  }\n};\n\n// export const togglePixel = (canvas, x, y) => {\n//   const context = canvas.getContext('2d');\n//   var image = context.getImageData(x, y, 1, 1);\n//   if (image) {\n//     const xPos = Math.floor(x / SCALE);\n//     const yPos = Math.floor(y / SCALE);\n\n//     if (image.data && image.data[3] != 0) {\n//       context.clearRect(xPos * SCALE, yPos * SCALE, SCALE, SCALE);\n//     } else {\n//       context.fillRect(xPos * SCALE, yPos * SCALE, SCALE, SCALE);\n//     }\n//     console.log(image);\n//   }\n// };\n// };\n","import React from 'react';\n\nimport Header from '../components/header';\nimport Canvas from '../components/canvas';\nimport Row from '../components/row';\nimport Button from '../components/button';\nimport ControlPanel from '../containers/controlPanel';\n\nimport {\n  countNeighbors,\n  drawGrid,\n  generateRandomGrid,\n  isPixelSet,\n  clearPixel,\n  drawPixel\n} from '../util/canvasUtil';\n\nimport { WIDTH, HEIGHT } from '../util/constants';\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    let grid = [[]];\n    for (let i = 0; i < WIDTH; i++) {\n      for (let j = 0; j < HEIGHT; j++) {\n        if (!grid[i]) {\n          grid[i] = [];\n        }\n        grid[i][j] = false;\n      }\n    }\n\n    this.state = {\n      grid: grid,\n      interval: null,\n      running: false\n    };\n  }\n\n  start = () => {\n    // toggleButton.setAttribute('value', 'Stop');\n    const interval = setInterval(() => {\n      let newGrid = [[]];\n      const { grid } = this.state;\n      grid.forEach(function(col, i) {\n        col.forEach(function(bool, j) {\n          const neighbors = countNeighbors(grid, i, j);\n\n          if (!newGrid[i]) {\n            newGrid[i] = [];\n          }\n\n          if (neighbors <= 1) {\n            newGrid[i][j] = false;\n          } else if (neighbors === 2) {\n            newGrid[i][j] = grid[i][j];\n          } else if (neighbors === 3) {\n            newGrid[i][j] = true;\n          } else if (neighbors >= 4) {\n            newGrid[i][j] = false;\n          }\n        });\n      });\n\n      this.setState({ grid: newGrid });\n      drawGrid(newGrid);\n    }, 50);\n\n    this.setState({ interval: interval, running: true });\n  };\n\n  stop = () => {\n    // toggleButton.setAttribute('value', 'Start');\n    clearInterval(this.state.interval);\n    this.setState({ running: false });\n  };\n\n  onToggle = () => {\n    const callback = this.state.running ? this.stop : this.start;\n    callback();\n  };\n\n  // toggleButton.addEventListener('click', function() {\n\n  // });\n\n  randomize = () => {\n    let grid = generateRandomGrid();\n    this.setState({ grid });\n    drawGrid(grid);\n  };\n\n  // randomButton.addEventListener('click', function() {\n  //   grid = generateRandomGrid();\n  //   drawGrid(grid);\n  // // });\n\n  // canvas.addEventListener('click', function(event) {\n  //   let x = event.pageX - canvas.offsetLeft;\n  //   let y = event.pageY - canvas.offsetTop;\n\n  //   const xPos = Math.floor(x / SCALE);\n  //   const yPos = Math.floor(y / SCALE);\n  //   if (!grid[xPos]) {\n  //     grid[xPos] = [];\n  //   }\n\n  //   if (isPixelSet(canvas, xPos, yPos)) {\n  //     clearPixel(canvas, xPos, yPos);\n  //     grid[xPos][yPos] = false;\n  //   } else {\n  //     drawPixel(canvas, xPos, yPos);\n  //     grid[xPos][yPos] = true;\n  //   }\n  // });\n\n  render() {\n    const { running } = this.state;\n    return (\n      <div>\n        <Header text={\"Convey's Game of Life\"} />\n        <Row>\n          <ControlPanel\n            running={running}\n            onToggle={this.onToggle}\n            onRandomize={this.randomize}\n          />\n          <Canvas width={500} height={500} scale={1} />\n        </Row>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport registerServiceWorker from './registerServiceWorker';\nimport App from './app';\n\nregisterServiceWorker();\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}