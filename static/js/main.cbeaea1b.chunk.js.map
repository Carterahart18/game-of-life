{"version":3,"sources":["registerServiceWorker.js","util/generationUtil.js","util/constants.js","components/canvas/index.js","util/canvasUtil.js","containers/Board/index.js","components/button/index.js","containers/controlPanel/index.js","components/header/index.js","components/row/index.js","index.js","app/index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","getEmptyGeneration","generation","i","j","getRandomGeneration","Math","random","getNextGeneration","newGeneration","forEach","col","bool","neighbors","num","countNeighbors","Canvas","props","react_default","a","createElement","className","height","id","onMouseDown","onMouseMove","onMouseUp","scale","width","drawGeneration","canvas","document","getElementById","drawPixel","clearPixel","x","y","getContext","fillRect","clearRect","getCoordinates","event","pageX","offsetLeft","pageY","offsetTop","floor","Board","_useState","useState","_useState2","Object","slicedToArray","drawing","setDrawing","useEffect","currentGeneration","_getCoordinates","_getCoordinates2","setPixel","_getCoordinates3","_getCoordinates4","Button","disabled","onClick","text","ControlPanel","onToggle","running","onStep","onRandomize","onClear","Header","Row","children","URL","process","origin","addEventListener","concat","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker","ReactDOM","render","setCurrentGeneration","_useState3","_useState4","gameInterval","setGameInterval","_useState5","_useState6","setRunning","stepBoard","stopGame","clearInterval","interval","setInterval","startGame","value"],"mappings":"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","file":"static/js/main.cbeaea1b.chunk.js","sourcesContent":["// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { WIDTH, HEIGHT } from './constants';\n\nexport const getEmptyGeneration = () => {\n  let generation = [[]];\n  for (let i = 0; i < WIDTH; i++) {\n    for (let j = 0; j < HEIGHT; j++) {\n      if (!generation[i]) {\n        generation[i] = [];\n      }\n      generation[i][j] = false;\n    }\n  }\n  return generation;\n};\n\nexport const getRandomGeneration = () => {\n  let generation = [[]];\n\n  for (let i = 0; i < WIDTH; i++) {\n    for (let j = 0; j < HEIGHT; j++) {\n      if (!generation[i]) {\n        generation[i] = [];\n      }\n      generation[i][j] = Math.random() * 100 > 50;\n    }\n  }\n\n  return generation;\n};\n\nexport const countNeighbors = (generation, i, j) => {\n  let num = 0;\n\n  if (generation[i - 1]) {\n    if (generation[i - 1][j - 1]) num++;\n    if (generation[i - 1][j]) num++;\n    if (generation[i - 1][j + 1]) num++;\n  }\n  if (generation[i][j - 1]) num++;\n  if (generation[i][j + 1]) num++;\n  if (generation[i + 1]) {\n    if (generation[i + 1][j - 1]) num++;\n    if (generation[i + 1][j]) num++;\n    if (generation[i + 1][j + 1]) num++;\n  }\n\n  return num;\n};\n\nexport const getNextGeneration = generation => {\n  let newGeneration = [[]];\n  generation.forEach(function(col, i) {\n    col.forEach(function(bool, j) {\n      const neighbors = countNeighbors(generation, i, j);\n\n      if (!newGeneration[i]) {\n        newGeneration[i] = [];\n      }\n\n      if (neighbors <= 1) {\n        newGeneration[i][j] = false;\n      } else if (neighbors === 2) {\n        newGeneration[i][j] = generation[i][j];\n      } else if (neighbors === 3) {\n        newGeneration[i][j] = true;\n      } else if (neighbors >= 4) {\n        newGeneration[i][j] = false;\n      }\n    });\n  });\n  return newGeneration;\n};\n\nexport const cloneGeneration = generation => {\n  let newGeneration = [[]];\n  generation.forEach(function(col, i) {\n    col.forEach(function(bool, j) {\n      if (!newGeneration[i]) {\n        newGeneration[i] = [];\n      }\n      newGeneration[i][j] = generation[i][j];\n    });\n  });\n  return newGeneration;\n};\n\nexport const setPixel = (generation, i, j, value) => {\n  let newGeneration = cloneGeneration(generation);\n  if (!newGeneration[i]) {\n    newGeneration[i] = [];\n  }\n  newGeneration[i][j] = value;\n  return newGeneration;\n};\n","export const WIDTH = 100;\nexport const HEIGHT = 100;\nexport const SCALE = 5;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './styles.css';\n\nconst propTypes = {\n  height: PropTypes.number.isRequired,\n  onMouseDown: PropTypes.func.isRequired,\n  onMouseMove: PropTypes.func.isRequired,\n  onMouseUp: PropTypes.func.isRequired,\n  scale: PropTypes.number.isRequired,\n  width: PropTypes.number.isRequired\n};\n\nexport default function Canvas(props) {\n  return (\n    <canvas\n      className={'Canvas'}\n      height={props.height}\n      id={'canvas'}\n      onMouseDown={props.onMouseDown}\n      onMouseMove={props.onMouseMove}\n      onMouseUp={props.onMouseUp}\n      scale={props.scale}\n      width={props.width}\n    />\n  );\n}\n\nCanvas.propTypes = propTypes;\n","// Canvas utility\n\nimport { SCALE } from './constants';\n\nexport const drawGeneration = generation => {\n  const canvas = document.getElementById('canvas');\n  generation.forEach(function(col, i) {\n    col.forEach(function(bool, j) {\n      if (generation[i][j]) {\n        drawPixel(canvas, i, j, SCALE);\n      } else {\n        clearPixel(canvas, i, j, SCALE);\n      }\n    });\n  });\n};\n\nexport const drawPixel = (canvas, x, y) => {\n  canvas.getContext('2d').fillRect(x * SCALE, y * SCALE, SCALE, SCALE);\n};\n\nexport const clearPixel = (canvas, x, y) => {\n  canvas.getContext('2d').clearRect(x * SCALE, y * SCALE, SCALE, SCALE);\n};\n\nexport const isPixelSet = (canvas, x, y) => {\n  var image = canvas.getContext('2d').getImageData(x, y, 1, 1);\n  if (image) {\n    return image.data && image.data[3] !== 0 ? true : false;\n  }\n};\n\nexport const getCoordinates = event => {\n  const canvas = document.getElementById('canvas');\n\n  let x = event.pageX - canvas.offsetLeft;\n  let y = event.pageY - canvas.offsetTop;\n\n  const xPos = Math.floor(x / SCALE);\n  const yPos = Math.floor(y / SCALE);\n  return [xPos, yPos];\n};\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport Canvas from '../../components/canvas';\n\nimport { drawGeneration, getCoordinates } from '../../util/canvasUtil';\n\nconst propTypes = {\n  currentGeneration: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.bool)),\n  setPixel: PropTypes.func.isRequired\n};\n\nexport default function Board(props) {\n  const [drawing, setDrawing] = useState(false);\n\n  useEffect(() => {\n    drawGeneration(props.currentGeneration);\n  }, [props.currentGeneration]);\n\n  const onMouseDown = event => {\n    setDrawing(true);\n    const [i, j] = getCoordinates(event);\n    props.setPixel(i, j, true);\n  };\n\n  const onMouseMove = event => {\n    if (drawing) {\n      const [i, j] = getCoordinates(event);\n      props.setPixel(i, j, true);\n    }\n  };\n\n  const onMouseUp = event => {\n    setDrawing(false);\n  };\n\n  return (\n    <div className={'Board-container'}>\n      <Canvas\n        height={500}\n        onMouseDown={onMouseDown}\n        onMouseMove={onMouseMove}\n        onMouseUp={onMouseUp}\n        scale={1}\n        width={500}\n      />\n    </div>\n  );\n}\n\nBoard.propTypes = propTypes;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './styles.css';\n\nconst propTypes = {\n  disabled: PropTypes.bool,\n  id: PropTypes.string,\n  onClick: PropTypes.func.isRequired,\n  text: PropTypes.string.isRequired\n};\n\nexport default function Button(props) {\n  return (\n    <button\n      id={props.id}\n      disabled={props.disabled}\n      className={'button'}\n      onClick={props.onClick}\n    >\n      {props.text}\n    </button>\n  );\n}\n\nButton.propTypes = propTypes;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Button from '../../components/button';\n\nimport './styles.css';\n\nconst propTypes = {\n  running: PropTypes.bool.isRequired,\n  onClear: PropTypes.func.isRequired,\n  onStep: PropTypes.func.isRequired,\n  onRandomize: PropTypes.func.isRequired,\n  onToggle: PropTypes.func.isRequired\n};\n\nexport default function ControlPanel(props) {\n  return (\n    <div className={'ControlPanel-container'}>\n      <Button\n        onClick={props.onToggle}\n        text={props.running ? 'Stop' : 'Start'}\n      />\n      <Button disabled={props.running} onClick={props.onStep} text={'Step'} />\n      <Button\n        disabled={props.running}\n        onClick={props.onRandomize}\n        text={'Randomize'}\n      />\n      <Button onClick={props.onClear} text={'Clear'} />\n    </div>\n  );\n}\n\nControlPanel.propTypes = propTypes;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './styles.css';\n\nconst propTypes = {\n  text: PropTypes.string\n};\n\nexport default function Header(props) {\n  return (\n    <div className={'App-header'}>\n      <h1 className={'App-header-text'}>{props.text}</h1>\n    </div>\n  );\n}\n\nHeader.propTypes = propTypes;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './styles.css';\n\nconst propTypes = {\n  width: PropTypes.number\n};\n\nexport default function Row(props) {\n  return (\n    <div className={'Row'}>\n      {props.children}\n    </div>\n  );\n}\n\nRow.propTypes = propTypes;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport registerServiceWorker from './registerServiceWorker';\nimport App from './app';\n\nregisterServiceWorker();\n\nReactDOM.render(<App />, document.getElementById('root'));\n","import React, { useState } from 'react';\nimport {\n  getEmptyGeneration,\n  getRandomGeneration,\n  getNextGeneration,\n  setPixel\n} from '../util/generationUtil';\n\nimport Board from '../containers/Board';\nimport ControlPanel from '../containers/controlPanel';\nimport Header from '../components/header';\nimport Row from '../components/row';\n\nexport default function App() {\n  // constructor(props) {\n  //   super(props);\n  //   state = {\n  //     currentGeneration: getEmptyGeneration(),\n  //     interval: null,\n  //     running: false\n  //   };\n  // }\n\n  const [currentGeneration, setCurrentGeneration] = useState(\n    getEmptyGeneration()\n  );\n  const [gameInterval, setGameInterval] = useState(null);\n  const [running, setRunning] = useState(false);\n\n  const stepBoard = () => {\n    // debugger;\n    // const nextGen = getNextGeneration(currentGeneration);\n    setCurrentGeneration(currentGeneration =>\n      getNextGeneration(currentGeneration)\n    );\n    setRunning(false);\n\n    // setState(state => ({\n    //   currentGeneration: getNextGeneration(state.currentGeneration)\n    // }));\n  };\n\n  const setPixel = (i, j, value) => {\n    setCurrentGeneration(setPixel(currentGeneration, i, j, value));\n    // setState({\n    //   currentGeneration: setPixel(state.currentGeneration, i, j, value)\n    // });\n  };\n\n  const startGame = () => {\n    const interval = setInterval(() => {\n      stepBoard();\n    }, 50);\n    setGameInterval(interval);\n    setRunning(true);\n\n    // setState({ interval: interval, running: true });\n  };\n\n  const stopGame = () => {\n    debugger;\n    clearInterval(gameInterval);\n    setRunning(false);\n\n    // setState({ running: false });\n  };\n\n  const toggleGame = () => {\n    running ? stopGame() : startGame();\n  };\n\n  const randomize = () => {\n    setCurrentGeneration(getRandomGeneration());\n    // setState({ currentGeneration: getRandomGeneration() });\n  };\n\n  const clearBoard = () => {\n    stopGame();\n    setCurrentGeneration(getEmptyGeneration());\n    // setState({ currentGeneration: getEmptyGeneration() });\n  };\n\n  return (\n    <div>\n      <Header text={\"Convey's Game of Life\"} />\n      <Row>\n        <ControlPanel\n          running={running}\n          onClear={clearBoard}\n          onStep={stepBoard}\n          onRandomize={randomize}\n          onToggle={toggleGame}\n        />\n        <Board currentGeneration={currentGeneration} setPixel={setPixel} />\n      </Row>\n    </div>\n  );\n}\n"],"sourceRoot":""}